mutate(Species = as.factor(Species),
Event = as.factor(Event))
glimpse(trees)
trees %>%
select(Event, Time, NSC, Lignin, Phenolics, EMF, AMF) %>%
gather(-Event, key = "variable", value = "value") %>%
group_by(variable, Event) %>%
summarize(mean = mean(value, na.rm = TRUE)) %>%
ggplot()+
geom_bar(aes(y = mean, x = Event), stat = "identity")+
facet_wrap(~variable, scales = "free")+
theme_bw()+
labs(title = "Mean Values of Continuous Variables, by Outcome",
x = "Tree Mortality Event",
y = "Mean Variable Value")
trees %>%
select(Event, Time, NSC, Lignin, Phenolics, EMF, AMF) %>%
gather(-Event, key = "variable", value = "value") %>%
ggplot()+
geom_histogram(aes(value))+
facet_grid(Event~variable, scales = "free")+
theme_bw()+
labs(title = "Distribution of Continuous Variables",
x = "Continuous Variable Value",
y = "Count of observations")
trees %>%
select(Event, Soil, Sterile, Conspecific, Myco, SoilMyco, Species) %>%
gather(-Event, key = "variable", value = "value") %>%
count(variable, value, Event) %>%
ggplot()+
geom_bar(aes(value, n, fill = Event),
position = "dodge", stat="identity") +
facet_wrap(~variable, scales="free") +
coord_flip()+
theme_bw() +
labs(title = "Counts of Continuous Variables across Categories, by Mortality State",
x = "",
y = "Count of observations")
reg_logit <- glm(data = trees ,
Event ~ Light_ISF + NSC + Lignin + Phenolics + Species + Soil,
family="binomial")
summary(reg_logit)
exp_coef <- reg_logit$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
exp_coef %>%
kable() %>%
kable_styling()
set.seed(1234)
treetrainIndex <- createDataPartition(y = paste(trees$Species, trees$Soil),
p = .70,
list = FALSE,
times = 1)
treeTrain <- trees[ treetrainIndex,]
treeTest  <- trees[-treetrainIndex,]
logit_train <- glm(data = treeTrain, Event ~ Light_ISF + NSC + Lignin + Phenolics +
Species + Soil,
family="binomial"(link="logit"))
treeTest_with_results <-
treeTest %>%
mutate(estimate = predict(logit_train, treeTest,  type="response"))
ggplot()+
geom_histogram(data = treeTest_with_results, aes(estimate))+
theme_bw() +
labs(title = "Distribution of Model Estimates",
x = "Estimate",
y = "Count of prediction observations")
treeTest_with_results %>%
ggplot()+
geom_histogram(aes(estimate))+
facet_wrap(~Event, nrow= 2)+
theme_bw()+
labs(title = "Distribution of Model Estimates - By True Outcome",
x = "Estimate",
y = "Count of prediction observations")
treeTest_with_results <-
treeTest %>%
mutate(estimate = predict(logit_train, .,  type="response"),
prediction = as.factor(ifelse(estimate >= 0.4, 1, 0)))
caret::confusionMatrix(treeTest_with_results$prediction, as.factor(treeTest_with_results$Event), positive = "1")
treeTest_with_results %>%
mutate(outcome = case_when(prediction == 1 & Event == 1 ~ "TP",
prediction == 1 & Event == 0 ~ "FP",
prediction == 0 & Event == 0 ~ "TN",
prediction == 0 & Event == 1 ~ "FN")) %>%
group_by(Species, outcome) %>%
summarize(
count = n(),                              # Count the number of rows for each outcome
.groups = "drop"
) %>%
group_by(Species) %>%
mutate(
total = sum(count),                       # Total outcomes per species
rate = count / total                      # Rate of each outcome within species
) %>%
ggplot()+
geom_bar(aes(x = outcome, y = rate), stat = "identity")+
facet_wrap(~Species)+
theme_bw() +
labs(title = "Rates of Model Outcomes, by Species",
x = "Model Outcome",
y = "Rate")
ggplot(treeTest_with_results, aes(d = as.numeric(Event), m = as.numeric(estimate))) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')+
theme_bw()+
labs(title = "ROC Curve")
homes <- st_read("https://raw.githubusercontent.com/mafichman/applied_predictive_modeling/refs/heads/main/data/homes.geojson") %>%
st_as_sf() %>%
st_transform(4326)
summary(lm(data = homes, sale_price ~ year_built + number_of_bedrooms + number_of_bathrooms + total_livable_area))
ggplot(homes)+
geom_point(aes(x = year_built, y = sale_price))+
theme_bw()+
labs(title = "Sale Price as a Function of Year of Construction",
x = "Year Built",
y = "Sale Price (2023)")
homes <- homes %>%
mutate(age_categorical = case_when(year_built <= 1880 ~ "historic",
year_built > 1880 & year_built <= 1920 ~ "victorian",
year_built > 1920 & year_built <= 1980 ~ "mid-century",
year_built < 1980 & year_built <= 2000 ~ "modern",
year_built > 2000 ~ "modern"))
homes <- homes %>%
mutate(bedrooms_categorical = as.factor(number_of_bedrooms))
summary(lm(data = homes, sale_price ~ bedrooms_categorical + number_of_bathrooms + total_livable_area + age_categorical))
zips <- st_read("https://raw.githubusercontent.com/mafichman/applied_predictive_modeling/refs/heads/main/data/zctas_philly.geojson") %>%
st_as_sf() %>%
st_transform(4326)
homes <- st_join(homes, zips)
homes <- homes %>%
mutate(zip_code = as.factor(zip_code))
homes %>%
group_by(zip_code) %>%
summarize(mean_price = mean(sale_price)) %>%
ggplot()+
geom_bar(aes(x = fct_reorder(zip_code, mean_price), y = mean_price), stat = "identity")+
coord_flip()+
theme_bw()+
labs(title= "Mean Single Family Home Sale Price by Zip Code, 2023",
x = "Zip Code",
y = "Mean Sales Price, 2023 ($)")
summary(lm(data = homes, sale_price ~ bedrooms_categorical + number_of_bathrooms + total_livable_area + age_categorical + zip_code))
library(spdep)
neighborList <- knn2nb(knearneigh(st_coordinates(homes), 5))
spatialWeights <- nb2listw(neighborList, style="W")
homes$lagPriceSqFt <- lag.listw(spatialWeights, homes$sale_price/homes$total_livable_area)
cor.test(homes$sale_price, homes$lagPriceSqFt)
fitControl <- trainControl(method = "cv", number = 100)
set.seed(825)
reg.cv <-
train(sale_price ~ ., data = homes %>%
as.data.frame() %>%
select(bedrooms_categorical, number_of_bathrooms ,
total_livable_area, age_categorical, zip_code,
lagPriceSqFt, sale_price),
method = "lm", trControl = fitControl, na.action = na.pass)
reg.cv$resample
glimpse(yield_test_with_results)
ggplot(yield_test_with_results)+
geom_point(aes(y = Prediction, x = yield_hg_per_ha))+
stat_smooth(aes(y = yield_hg_per_ha, yield_hg_per_ha),
method = "lm", se = FALSE, size = 1, colour="blue") +
stat_smooth(aes(y = Prediction, x = yield_hg_per_ha),
method = "lm", se = FALSE, size = 1, colour="red") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(sf)
library(caret)
library(readr)
library(plotROC)
as.data.frame(cbind(c("OLS", "Logit", "Poisson"), c("Continuous", "Binary", "Counts"), c("Home Prices", "Inspection Pass/Fail of Restaurants", "Inspection Violations by Neighborhood"))) %>%
rename("Model Type" = V1,
"DV Type" = V2,
"DV Example" = V3) %>%
kable() %>%
kable_styling()
# Set seed for reproducibility
set.seed(123)
# Generate random x-y data
data <- tibble(
x = rnorm(100, mean = 50, sd = 10),  # 100 random x values from normal distribution
y = 2 * x + rnorm(100, mean = 0, sd = 15)  # y follows a linear trend with some noise
)
# Plot the data with a best-fit line
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Best-fit line with confidence interval
theme_minimal() +
labs(title = "Randomly Generated X-Y Data with Best Fit Line",
x = "X Values",
y = "Y Values")
yield_df <- read_csv("https://raw.githubusercontent.com/mafichman/applied_predictive_modeling/refs/heads/main/data/yield_df_clean.csv")
glimpse(yield_df)
yield_df %>%
select(yield_hg_per_ha, average_rain_fall_mm_per_year, yield_last_year, pesticides_tonnes, avg_temp) %>%
gather(key = "variable", value = "value") %>%
ggplot()+
geom_histogram(aes(value))+
facet_wrap(~variable, scales = "free")+
theme_minimal()+
labs(title = "Distribution of Continuous Variables",
x = "Continuous Variable Value",
y = "Count of observations")
yield_df %>%
select(yield_hg_per_ha, average_rain_fall_mm_per_year, yield_last_year, pesticides_tonnes) %>%
gather(-yield_hg_per_ha, key = "variable", value = "value") %>%
ggplot()+
geom_point(aes(x = value, y = yield_hg_per_ha))+
facet_wrap(~variable, scales = "free")+
theme_minimal() +
labs(title = "Correlations Between Continuous Variables and Yields",
x = "Continuous Variable Value",
y = "Crop Yield (hg/ha)")
cor.test(yield_df$yield_hg_per_ha, yield_df$pesticides_tonnes)
yield_df %>%
select(yield_hg_per_ha, Area, Item) %>%
gather(-yield_hg_per_ha, key = "variable", value = "value") %>%
ggplot()+
geom_bar(aes(x = value, y = yield_hg_per_ha), stat = "identity")+
facet_wrap(~variable, scales = "free")+
coord_flip()+
theme_minimal() +
labs(title = "Yields By Country and Crop Type",
x = "",
y = "Yield (Hg/ha")
reg1 <- lm(data = yield_df,
yield_hg_per_ha ~
average_rain_fall_mm_per_year + avg_temp + pesticides_tonnes)
summary(reg1)
reg2 <- lm(data = yield_df,
yield_hg_per_ha ~
average_rain_fall_mm_per_year + avg_temp + pesticides_tonnes + Item)
summary(reg2)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(sf)
library(caret)
library(readr)
library(plotROC)
as.data.frame(cbind(c("OLS", "Logit", "Poisson"), c("Continuous", "Binary", "Counts"), c("Home Prices", "Inspection Pass/Fail of Restaurants", "Inspection Violations by Neighborhood"))) %>%
rename("Model Type" = V1,
"DV Type" = V2,
"DV Example" = V3) %>%
kable() %>%
kable_styling()
# Set seed for reproducibility
set.seed(123)
# Generate random x-y data
data <- tibble(
x = rnorm(100, mean = 50, sd = 10),  # 100 random x values from normal distribution
y = 2 * x + rnorm(100, mean = 0, sd = 15)  # y follows a linear trend with some noise
)
# Plot the data with a best-fit line
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Best-fit line with confidence interval
theme_minimal() +
labs(title = "Randomly Generated X-Y Data with Best Fit Line",
x = "X Values",
y = "Y Values")
yield_df <- read_csv("https://raw.githubusercontent.com/mafichman/applied_predictive_modeling/refs/heads/main/data/yield_df_clean.csv")
glimpse(yield_df)
yield_df %>%
select(yield_hg_per_ha, average_rain_fall_mm_per_year, yield_last_year, pesticides_tonnes, avg_temp) %>%
gather(key = "variable", value = "value") %>%
ggplot()+
geom_histogram(aes(value))+
facet_wrap(~variable, scales = "free")+
theme_minimal()+
labs(title = "Distribution of Continuous Variables",
x = "Continuous Variable Value",
y = "Count of observations")
yield_df %>%
select(yield_hg_per_ha, average_rain_fall_mm_per_year, yield_last_year, pesticides_tonnes) %>%
gather(-yield_hg_per_ha, key = "variable", value = "value") %>%
ggplot()+
geom_point(aes(x = value, y = yield_hg_per_ha))+
facet_wrap(~variable, scales = "free")+
theme_minimal() +
labs(title = "Correlations Between Continuous Variables and Yields",
x = "Continuous Variable Value",
y = "Crop Yield (hg/ha)")
cor.test(yield_df$yield_hg_per_ha, yield_df$pesticides_tonnes)
yield_df %>%
select(yield_hg_per_ha, Area, Item) %>%
gather(-yield_hg_per_ha, key = "variable", value = "value") %>%
ggplot()+
geom_bar(aes(x = value, y = yield_hg_per_ha), stat = "identity")+
facet_wrap(~variable, scales = "free")+
coord_flip()+
theme_minimal() +
labs(title = "Yields By Country and Crop Type",
x = "",
y = "Yield (Hg/ha")
reg1 <- lm(data = yield_df,
yield_hg_per_ha ~
average_rain_fall_mm_per_year + avg_temp + pesticides_tonnes)
summary(reg1)
reg2 <- lm(data = yield_df,
yield_hg_per_ha ~
average_rain_fall_mm_per_year + avg_temp + pesticides_tonnes + Item)
summary(reg2)
reg3 <- lm(data = yield_df, yield_hg_per_ha ~ average_rain_fall_mm_per_year +
avg_temp + pesticides_tonnes + Item + yield_last_year)
summary(reg3)
set.seed(1234)
inTrain <- createDataPartition(
y = paste(yield_df$Area),
p = .70, list = FALSE)
yield_training <- yield_df[inTrain,]
yield_test <- yield_df[-inTrain,]
reg.training_1 <-
lm(data = yield_training,
yield_hg_per_ha ~ average_rain_fall_mm_per_year +
avg_temp + pesticides_tonnes + Item + yield_last_year)
yield_test_with_results <-
yield_test %>%
mutate(Prediction = predict(reg.training_1, yield_test),
Error = Prediction - yield_hg_per_ha,
AbsError = abs(Prediction - yield_hg_per_ha),
Abs_Pct_Error = (abs(Prediction - yield_hg_per_ha)) / yield_hg_per_ha)
yield_test_with_results %>%
summarize(MAPE = mean(Abs_Pct_Error),
MAE = mean(AbsError)) %>%
kable() %>%
kable_styling()
yield_test_with_results %>%
group_by(Item) %>%
summarize(MAPE = mean(Abs_Pct_Error),
MAE = mean(AbsError)) %>%
kable() %>%
kable_styling()
ggplot(yield_test_with_results)+
geom_point(aes(y = Prediction, x = yield_hg_per_ha))+
stat_smooth(aes(y = yield_hg_per_ha, yield_hg_per_ha),
method = "lm", se = FALSE, size = 1, colour="blue") +
stat_smooth(aes(y = Prediction, x = yield_hg_per_ha),
method = "lm", se = FALSE, size = 1, colour="red") +
theme_minimal() +
labs(title = "Observed vs. Predicted Yields",
x = "Observed Yield (Hg/ha)",
y = "Predicted Yield (Hg/ha)")
# Generate predictor variable (x)
ex_data <- tibble(
x = rnorm(100, mean = 0, sd = 2)  # 100 random values from N(0,2)
)
# Define a logit function with coefficients
beta_0 <- -1  # Intercept
beta_1 <- 2   # Slope
# Compute probabilities using logistic (sigmoid) function
ex_data <- ex_data %>%
mutate(prob = exp(beta_0 + beta_1 * x) / (1 + exp(beta_0 + beta_1 * x)),
y = rbinom(100, size = 1, prob = prob))  # Convert probabilities to binary outcome
# Fit a logistic regression model
logit_model <- glm(y ~ x, data = ex_data, family = binomial)
# Plot data with logistic regression fit
ggplot(ex_data, aes(x = x, y = y)) +
geom_jitter(width = 0.1, height = 0.05, alpha = 0.5, color = "blue") +  # Jitter to avoid overplotting
geom_smooth(method = "glm", method.args = list(family = binomial), color = "red", se = FALSE) +  # Logistic fit
theme_minimal() +
labs(title = "Simulated Logit Function with Logistic Regression Fit",
x = "X values",
y = "Binary Outcome (Y)")
trees <- read_csv ("https://raw.githubusercontent.com/mafichman/applied_predictive_modeling/refs/heads/main/data/tree_morbidity.csv") %>%
filter(is.na(Event)== FALSE) %>%
mutate(Species = as.factor(Species),
Event = as.factor(Event))
glimpse(trees)
trees %>%
select(Event, Time, NSC, Lignin, Phenolics, EMF, AMF) %>%
gather(-Event, key = "variable", value = "value") %>%
group_by(variable, Event) %>%
summarize(mean = mean(value, na.rm = TRUE)) %>%
ggplot()+
geom_bar(aes(y = mean, x = Event), stat = "identity")+
facet_wrap(~variable, scales = "free")+
theme_bw()+
labs(title = "Mean Values of Continuous Variables, by Outcome",
x = "Tree Mortality Event",
y = "Mean Variable Value")
trees %>%
select(Event, Time, NSC, Lignin, Phenolics, EMF, AMF) %>%
gather(-Event, key = "variable", value = "value") %>%
ggplot()+
geom_histogram(aes(value))+
facet_grid(Event~variable, scales = "free")+
theme_bw()+
labs(title = "Distribution of Continuous Variables",
x = "Continuous Variable Value",
y = "Count of observations")
trees %>%
select(Event, Soil, Sterile, Conspecific, Myco, SoilMyco, Species) %>%
gather(-Event, key = "variable", value = "value") %>%
count(variable, value, Event) %>%
ggplot()+
geom_bar(aes(value, n, fill = Event),
position = "dodge", stat="identity") +
facet_wrap(~variable, scales="free") +
coord_flip()+
theme_bw() +
labs(title = "Counts of Continuous Variables across Categories, by Mortality State",
x = "",
y = "Count of observations")
reg_logit <- glm(data = trees ,
Event ~ Light_ISF + NSC + Lignin + Phenolics + Species + Soil,
family="binomial")
summary(reg_logit)
exp_coef <- reg_logit$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
exp_coef %>%
kable() %>%
kable_styling()
set.seed(1234)
treetrainIndex <- createDataPartition(y = paste(trees$Species, trees$Soil),
p = .70,
list = FALSE,
times = 1)
treeTrain <- trees[ treetrainIndex,]
treeTest  <- trees[-treetrainIndex,]
logit_train <- glm(data = treeTrain, Event ~ Light_ISF + NSC + Lignin + Phenolics +
Species + Soil,
family="binomial"(link="logit"))
treeTest_with_results <-
treeTest %>%
mutate(estimate = predict(logit_train, treeTest,  type="response"))
ggplot()+
geom_histogram(data = treeTest_with_results, aes(estimate))+
theme_bw() +
labs(title = "Distribution of Model Estimates",
x = "Estimate",
y = "Count of prediction observations")
treeTest_with_results %>%
ggplot()+
geom_histogram(aes(estimate))+
facet_wrap(~Event, nrow= 2)+
theme_bw()+
labs(title = "Distribution of Model Estimates - By True Outcome",
x = "Estimate",
y = "Count of prediction observations")
treeTest_with_results <-
treeTest %>%
mutate(estimate = predict(logit_train, .,  type="response"),
prediction = as.factor(ifelse(estimate >= 0.4, 1, 0)))
caret::confusionMatrix(treeTest_with_results$prediction, as.factor(treeTest_with_results$Event), positive = "1")
treeTest_with_results %>%
mutate(outcome = case_when(prediction == 1 & Event == 1 ~ "TP",
prediction == 1 & Event == 0 ~ "FP",
prediction == 0 & Event == 0 ~ "TN",
prediction == 0 & Event == 1 ~ "FN")) %>%
group_by(Species, outcome) %>%
summarize(
count = n(),                              # Count the number of rows for each outcome
.groups = "drop"
) %>%
group_by(Species) %>%
mutate(
total = sum(count),                       # Total outcomes per species
rate = count / total                      # Rate of each outcome within species
) %>%
ggplot()+
geom_bar(aes(x = outcome, y = rate), stat = "identity")+
facet_wrap(~Species)+
theme_bw() +
labs(title = "Rates of Model Outcomes, by Species",
x = "Model Outcome",
y = "Rate")
ggplot(treeTest_with_results, aes(d = as.numeric(Event), m = as.numeric(estimate))) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')+
theme_bw()+
labs(title = "ROC Curve")
homes <- st_read("https://raw.githubusercontent.com/mafichman/applied_predictive_modeling/refs/heads/main/data/homes.geojson") %>%
st_as_sf() %>%
st_transform(4326)
ggplot()+
geom_sf(data = homes %>%
sample_n(1000), aes(fill = sale_price))+
theme_minimal()
ggplot()+
geom_sf(data = homes %>%
sample_n(1000), aes(fill = sale_price), color = "transparent")+
theme_minimal()
ggplot()+
geom_sf(data = homes %>%
sample_n(1000), aes(fill = sale_price, color = sale_price))+
theme_minimal()
ggplot()+
geom_sf(data = homes %>%
sample_n(1000), aes(fill = sale_price, color = sale_price),
alpha = 0.5, size = .75)+
theme_minimal()
ggplot()+
geom_sf(data = homes %>%
sample_n(1000), aes(fill = sale_price, color = sale_price),
alpha = 0.5, shape = 16, size = 1, show.legend = TRUE)+
scale_color_gradient(low = "#FFCCCC", high = "#990000", name = "Sale Price") +  # Light red to dark red
theme_minimal()
ggplot()+
geom_sf(data = homes %>%
sample_n(1000), aes(color = sale_price),
alpha = 0.5, shape = 16, size = 1, show.legend = TRUE)+
scale_color_gradient(low = "#FFCCCC", high = "#990000", name = "Sale Price") +  # Light red to dark red
theme_minimal()
